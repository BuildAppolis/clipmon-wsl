#!/usr/bin/env python3
"""
ClipmonWSL - Unified Clipboard Monitor
A smart clipboard monitor that adapts to how you want to use it
by BuildAppolis (www.buildappolis.com)
"""

import os
import sys
import argparse
import subprocess
import json
from pathlib import Path
import signal
import time

class ClipmonWSL:
    def __init__(self):
        self.home = Path.home()
        self.config_file = self.home / '.clipmon' / 'config.json'
        self.pid_file = self.home / '.claude' / 'clipmon.pid'
        self.script_dir = Path(__file__).parent
        
        # Load or create config
        self.load_config()
    
    def load_config(self):
        """Load user configuration or create defaults"""
        default_config = {
            'default_mode': 'tray',  # tray, gui, terminal
            'auto_start_monitor': True,
            'minimize_to_tray': True,
            'show_notifications': False,  # Disabled for WSL
            'capture_location': 'project',  # project or global
            'theme': '8bit-dark'
        }
        
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r') as f:
                    self.config = json.load(f)
                # Merge with defaults for any missing keys
                for key in default_config:
                    if key not in self.config:
                        self.config[key] = default_config[key]
            except:
                self.config = default_config
        else:
            self.config = default_config
            self.save_config()
    
    def save_config(self):
        """Save configuration"""
        self.config_file.parent.mkdir(parents=True, exist_ok=True)
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def run(self, mode=None, background=False, terminal=False):
        """Main entry point for running ClipmonWSL"""
        
        # Determine mode
        if terminal:
            self.run_terminal_mode()
        elif background or mode == 'bg':
            self.run_background_mode()
        elif mode == 'gui':
            self.run_gui_mode()
        elif mode == 'tray':
            self.run_tray_mode()
        elif mode == 'viewer':
            self.run_viewer()
        elif mode == 'config':
            self.configure()
        elif mode == 'status':
            self.show_status()
        elif mode == 'stop':
            self.stop_monitor()
        else:
            # Default behavior based on config
            if self.config['default_mode'] == 'tray':
                self.run_tray_mode()
            elif self.config['default_mode'] == 'gui':
                self.run_gui_mode()
            else:
                self.run_terminal_mode()
    
    def run_terminal_mode(self):
        """Run in terminal with live output"""
        print("\033[0;36m╔══════════════════════════════════════════════════════════════╗\033[0m")
        print("\033[0;36m║\033[0m          \033[1m📋 CLIPMONWSL\033[0m \033[0;32m[TERMINAL MODE]\033[0m                   \033[0;36m║\033[0m")
        print("\033[0;36m╚══════════════════════════════════════════════════════════════╝\033[0m")
        print()
        
        # Start monitor in foreground
        try:
            subprocess.run([str(self.script_dir / 'clipmon-bg'), 'start'], check=False)
        except KeyboardInterrupt:
            print("\n\033[1;33mStopping monitor...\033[0m")
            subprocess.run([str(self.script_dir / 'clipmon-bg'), 'stop'], check=False)
    
    def run_background_mode(self):
        """Run monitor in background"""
        print("\033[0;36mStarting ClipmonWSL in background...\033[0m")
        
        # Start monitor daemon
        result = subprocess.run(
            [str(self.script_dir / 'clipmon-bg'), 'start'],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("\033[0;32m✓ Monitor started in background\033[0m")
            print("\033[2mUse 'clipmon status' to check status\033[0m")
            print("\033[2mUse 'clipmon stop' to stop monitoring\033[0m")
        else:
            print("\033[0;31m✗ Failed to start monitor\033[0m")
            if result.stderr:
                print(result.stderr)
    
    def run_gui_mode(self):
        """Run with GUI control panel"""
        print("\033[0;36mStarting ClipmonWSL Control Panel...\033[0m")
        
        # Start monitor if configured
        if self.config['auto_start_monitor']:
            subprocess.run(
                [str(self.script_dir / 'clipmon-bg'), 'start'],
                capture_output=True
            )
        
        # Launch GUI
        try:
            subprocess.run([str(self.script_dir / 'clipmon-gui')], check=False)
        except KeyboardInterrupt:
            pass
    
    def run_tray_mode(self):
        """Run with system tray icon"""
        print("\033[0;36mStarting ClipmonWSL with System Tray...\033[0m")
        
        # Check if Windows Python is available
        try:
            # Try Windows Python for system tray
            result = subprocess.run(
                ['python3.exe', '--version'],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                # Start monitor if configured
                if self.config['auto_start_monitor']:
                    subprocess.run(
                        [str(self.script_dir / 'clipmon-bg'), 'start'],
                        capture_output=True
                    )
                
                # Launch Windows system tray
                print("\033[0;32m✓ System tray icon will appear in your Windows system tray\033[0m")
                print("\033[2mRight-click the tray icon for options\033[0m")
                
                try:
                    subprocess.run([
                        'python3.exe',
                        str(self.script_dir / 'clipmon-systray.py')
                    ], check=False)
                except KeyboardInterrupt:
                    print("\n\033[1;33mExiting...\033[0m")
            else:
                print("\033[1;33mWindows Python not found, falling back to GUI mode\033[0m")
                self.run_gui_mode()
        except FileNotFoundError:
            print("\033[1;33mWindows Python not found, falling back to GUI mode\033[0m")
            self.run_gui_mode()
    
    def run_viewer(self):
        """Launch the captures viewer"""
        print("\033[0;36mStarting ClipmonWSL Captures Viewer...\033[0m")
        try:
            subprocess.run([str(self.script_dir / 'clipmon-viewer')], check=False)
        except KeyboardInterrupt:
            pass
    
    def show_status(self):
        """Show monitor status"""
        subprocess.run([str(self.script_dir / 'clipmon-bg'), 'status'])
    
    def stop_monitor(self):
        """Stop the monitor"""
        subprocess.run([str(self.script_dir / 'clipmon-bg'), 'stop'])
    
    def configure(self):
        """Interactive configuration"""
        print("\033[0;36m╔══════════════════════════════════════════════════════════════╗\033[0m")
        print("\033[0;36m║\033[0m          \033[1mCLIPMONWSL CONFIGURATION\033[0m                          \033[0;36m║\033[0m")
        print("\033[0;36m╚══════════════════════════════════════════════════════════════╝\033[0m")
        print()
        
        # Default mode
        print("Default startup mode:")
        print("  1. System Tray (recommended)")
        print("  2. GUI Control Panel")
        print("  3. Terminal Mode")
        choice = input("\nSelect (1-3) [1]: ").strip() or "1"
        
        if choice == "1":
            self.config['default_mode'] = 'tray'
        elif choice == "2":
            self.config['default_mode'] = 'gui'
        elif choice == "3":
            self.config['default_mode'] = 'terminal'
        
        # Auto-start monitor
        choice = input("\nAuto-start monitor on launch? (y/n) [y]: ").strip().lower() or "y"
        self.config['auto_start_monitor'] = choice == 'y'
        
        # Capture location
        print("\nCapture location:")
        print("  1. Project-specific (.claude/captures)")
        print("  2. Global (~/.claude/clipboard)")
        choice = input("\nSelect (1-2) [1]: ").strip() or "1"
        self.config['capture_location'] = 'project' if choice == '1' else 'global'
        
        self.save_config()
        print("\n\033[0;32m✓ Configuration saved!\033[0m")
        print(f"\033[2mConfig file: {self.config_file}\033[0m")

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='ClipmonWSL - Smart Clipboard Monitor for WSL',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  clipmon                    # Start with default mode (from config)
  clipmon --terminal         # Start in terminal mode
  clipmon bg                 # Start in background
  clipmon gui                # Open control panel
  clipmon tray               # Start with system tray
  clipmon viewer             # Open captures viewer
  clipmon config             # Configure settings
  clipmon status             # Check monitor status
  clipmon stop               # Stop monitor

Default behavior can be configured with 'clipmon config'
        """
    )
    
    parser.add_argument('mode', nargs='?', 
                       choices=['bg', 'gui', 'tray', 'viewer', 'config', 'status', 'stop'],
                       help='Operation mode')
    parser.add_argument('--terminal', action='store_true',
                       help='Run in terminal mode with live output')
    parser.add_argument('--background', '-b', action='store_true',
                       help='Run in background (same as "clipmon bg")')
    
    args = parser.parse_args()
    
    # Create app instance
    app = ClipmonWSL()
    
    # Run with appropriate mode
    app.run(
        mode=args.mode,
        background=args.background,
        terminal=args.terminal
    )

if __name__ == "__main__":
    main()